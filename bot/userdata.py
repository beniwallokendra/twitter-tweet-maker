#!/usr/bin/env python3
"""A custom user data class."""
from threading import Lock
from typing import Optional, Dict, Tuple, Callable

from telegram import User, PhotoSize
from telegram.ext import CallbackContext


class UserData:  # pylint: disable=R0902
    """Custom class to store information relevant for each user.

    Args:
        user_id: The users id.
        username: The users username
        first_name: The users first name.
        full_name: The users full name.
        photo_file_unique_id: The users current photos unique file id.
        fallback_photo: The users fallback photo
        sticker_file_ids: Mapping file unique id → file id of stickers sent by the user for later
            use.
        temp_file_ids: Temporarily saved file ids of stickers generated by the user.
        store_stickers: Whether or not this users wants to store stickers. Defaults to :obj:`True`.

    Attributes:
        user_id: The users id.
        username: The users username
        first_name: The users first name.
        full_name: The users full name.
        photo_file_unique_id: The users current photos unique file id.
        fallback_photo: The users fallback photo
        sticker_file_ids: Mapping file unique id → file id of stickers sent by the user for later
            use.
        temp_file_ids: Temporarily saved file ids of stickers generated by the user.
        store_stickers: Whether or not this users wants to store stickers. Defaults to :obj:`True`.
    """

    __slots__ = (
        'user_id',
        'username',
        'first_name',
        'full_name',
        'photo_file_unique_id',
        'fallback_photo',
        'sticker_file_ids',
        'temp_file_ids',
        'store_stickers',
        '_lock',
        '_ilq_counter',
    )

    def __init__(  # pylint: disable=R0913
        self,
        user_id: Optional[int] = None,
        username: Optional[str] = None,
        first_name: Optional[str] = None,
        full_name: Optional[str] = None,
        photo_file_unique_id: Optional[str] = None,
        fallback_photo: Optional[PhotoSize] = None,
        sticker_file_ids: Dict[str, str] = None,
        temp_file_ids: Dict[str, Tuple[str, str]] = None,
        store_stickers: Optional[bool] = True,
    ):
        self.user_id = user_id
        self.username = username
        self.first_name = first_name
        self.full_name = full_name
        self.photo_file_unique_id = photo_file_unique_id
        self.fallback_photo = fallback_photo
        self.store_stickers = store_stickers

        self.sticker_file_ids: Dict[str, str] = sticker_file_ids or {}
        self.temp_file_ids: Dict[str, Tuple[str, str]] = temp_file_ids or {}

        self._lock = Lock()
        self._ilq_counter = 0

    def get_inline_query_count(self) -> int:
        """Get the number of inline queries that are currently being processed for this user."""
        with self._lock:
            return self._ilq_counter

    def increase_inline_query_count(self) -> None:
        """Increase the number of inline queries that are currently being processed for this
        user."""
        with self._lock:
            self._ilq_counter += 1

    def decrease_inline_query_count(self) -> None:
        """Decrease the number of inline queries that are currently being processed for this
        user."""
        with self._lock:
            if self._ilq_counter >= 1:
                self._ilq_counter -= 1

    def update_user_info(self, user: User, photo_file_unique_id: Optional[str]) -> None:
        """Updates the stored info about the user with the fresh users instance.

        Args:
            user: The User instance.
            photo_file_unique_id: The up to date unique file id.
        """
        self.user_id = user.id
        self.first_name = user.first_name
        self.full_name = user.full_name
        self.username = user.username
        self.photo_file_unique_id = photo_file_unique_id

    def update_fallback_photo(self, fallback_photo: Optional[PhotoSize]) -> None:
        """Updates fallback photo for this user.

        Args:
            fallback_photo: The new fallback photo.
        """
        self.fallback_photo = fallback_photo

    def __getattr__(self, item: str) -> None:
        # Only called when `self.item` raises AttributeError
        # But pickle calls it for some magic methods, too …
        if item.startswith('__') and item.endswith('__'):
            return super().__getattr__(item)  # type: ignore[misc]  # pylint: disable=E1101
        return None

    _INIT_ARGS = Tuple[
        Optional[int],
        Optional[str],
        Optional[str],
        Optional[str],
        Optional[str],
        Optional[PhotoSize],
        Dict[str, str],
        Dict[str, Tuple[str, str]],
        Optional[bool],
    ]
    _CALLABLE_ARGS = [
        Optional[int],
        Optional[str],
        Optional[str],
        Optional[str],
        Optional[str],
        Optional[PhotoSize],
        Dict[str, str],
        Dict[str, Tuple[str, str]],
        Optional[bool],
    ]

    # We override __reduce__ to amend for the unpickable lock
    def __reduce__(
        self,
    ) -> Tuple[Callable[_CALLABLE_ARGS, 'UserData'], _INIT_ARGS]:  # type: ignore[misc]
        return self.__class__, (
            self.user_id,
            self.username,
            self.first_name,
            self.full_name,
            self.photo_file_unique_id,
            self.fallback_photo,
            self.sticker_file_ids,
            self.temp_file_ids,
            self.store_stickers,
        )


CCT = CallbackContext[UserData, dict, dict]
"""Type alias for :class:`telegram.ext.CallbackContext` with :class:`UserData` as user data."""
